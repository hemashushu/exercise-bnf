/**
 * LR parser generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/path-to-output-parser-file.js
 */

'use strict';

/**
 * Matched token text.
 */
let yytext;

/**
 * Length of the matched token text.
 */
let yyleng;

/**
 * Storage object.
 */
let yy = {};

/**
 * Result of semantic action.
 */
let __;

/**
 * Result location object.
 */
let __loc;

function yyloc(start, end) {
  if (!yy.options.captureLocations) {
    return null;
  }

  // Epsilon doesn't produce location.
  if (!start || !end) {
    return start || end;
  }

  return {
    startOffset: start.startOffset,
    endOffset: end.endOffset,
    startLine: start.startLine,
    endLine: end.endLine,
    startColumn: start.startColumn,
    endColumn: end.endColumn,
  };
}

const EOF = '$';

/**
 * List of productions (generated by Syntax tool).
 */
const productions = [[-1,1,(_1) => { __ = _1 }],
[0,1,(_1) => { 
            __ = {
                type: 'Program',
                body: _1
            }
         }],
[1,1,(_1) => {  __ = [_1] }],
[1,2,(_1,_2) => {  _1.push(_2); __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[3,4,(_1,_2,_3,_4) => { 
            __ = {
                type: 'ClassDeclaration',
                id: _2,
                superClass: _3,
                body: _4
            }
         }],
[4,1,(_1) => { __ = _1 }],
[4,0,() => {  __ = null  }],
[5,2,(_1,_2) => {  __ = _2  }],
[6,1,(_1) => { __ = _1 }],
[6,1,(_1) => { __ = _1 }],
[7,5,(_1,_2,_3,_4,_5) => { 
            __ = {
                type: 'WhileStatement',
                test: _3,
                body: _5
            }
         }],
[8,9,(_1,_2,_3,_4,_5,_6,_7,_8,_9) => { 
            __ = {
                type: 'ForStatement',
                init: _3,
                test: _5,
                update: _7,
                body: _9
            }
         }],
[9,1,(_1) => { __ = _1 }],
[9,1,(_1) => { __ = _1 }],
[9,0,() => {  __ = null  }],
[10,2,(_1,_2) => {  __ = _1  }],
[11,2,(_1,_2) => { 
            __ = {
                type: 'VariableStatement',
                declarations: _2
            }
         }],
[12,1,(_1) => {  __ = [_1]  }],
[12,3,(_1,_2,_3) => {  _1.push(_3); __ = _1 }],
[13,2,(_1,_2) => { 
            __ = {
                type: 'VariableDeclaration',
                id: _1,
                init: _2
            }
         }],
[14,1,(_1) => { __ = _1 }],
[14,0,() => {  __ = null  }],
[15,2,(_1,_2) => {  __ = _2  }],
[16,5,(_1,_2,_3,_4,_5) => {  __ = IfStatement(_3, _5)  }],
[16,7,(_1,_2,_3,_4,_5,_6,_7) => {  __ = IfStatement(_3, _5, _7)  }],
[17,6,(_1,_2,_3,_4,_5,_6) => { 
            __ = {
                type: 'FunctionDeclaration',
                name: _2,
                params: _4,
                body: _6,
            }
         }],
[18,1,(_1) => { __ = _1 }],
[18,0,() => { 
            __ = []
         }],
[19,1,(_1) => { 
            __ = [_1]
         }],
[19,3,(_1,_2,_3) => { 
            _1.push(_3); __ = _1
         }],
[20,3,(_1,_2,_3) => { 
            __ = {
                type: 'ReturnStatement',
                argument: _2
            }
         }],
[21,3,(_1,_2,_3) => { 
            __ = {
                type: 'BlockStatement',
                body: _2
            }
         }],
[22,1,(_1) => { __ = _1 }],
[22,0,() => { 
            __ = []
         }],
[23,2,(_1,_2) => { 
            __ = {
                type: 'ExpressionStatement',
                expression: _1
            }
         }],
[24,1,(_1) => { 
            __ = {
                type: 'EmptyStatement'
            }
         }],
[25,1,(_1) => { 
            __ = {
                type: 'Identifier',
                value: _1
            }
         }],
[26,1,(_1) => { __ = _1 }],
[26,0,() => { 
            __ = null
         }],
[27,1,(_1) => { __ = _1 }],
[28,1,(_1) => { __ = _1 }],
[28,3,(_1,_2,_3) => { 
            __ = {
                type: 'AssignmentExpression',
                left: _1,
                operator: _2,
                right: _3
            }
         }],
[29,1,(_1) => { __ = _1 }],
[29,1,(_1) => { __ = _1 }],
[30,1,(_1) => { __ = _1 }],
[30,3,(_1,_2,_3) => {  __ = LogicalExpression(_1, _2, _3)  }],
[31,1,(_1) => { __ = _1 }],
[31,3,(_1,_2,_3) => {  __ = LogicalExpression(_1, _2, _3)  }],
[32,1,(_1) => { __ = _1 }],
[32,3,(_1,_2,_3) => {  __ = BinaryExpression(_1, _2, _3)  }],
[33,1,(_1) => { __ = _1 }],
[33,3,(_1,_2,_3) => {  __ = BinaryExpression(_1, _2, _3)  }],
[34,3,(_1,_2,_3) => {  __ = BinaryExpression(_1, _2, _3)  }],
[34,1,(_1) => { __ = _1 }],
[35,3,(_1,_2,_3) => {  __ = BinaryExpression(_1, _2, _3)  }],
[35,1,(_1) => { __ = _1 }],
[36,1,(_1) => { __ = _1 }],
[36,1,(_1) => { __ = _1 }],
[36,2,(_1,_2) => {  __ = UnaryExpression(_1, _2) }],
[37,2,(_1,_2) => { 
            __ = {
                type: 'CallExpression',
                callee: _1,
                arguments: _2
            }
         }],
[38,1,(_1) => { __ = _1 }],
[38,1,(_1) => { __ = _1 }],
[39,3,(_1,_2,_3) => {  __ = _2  }],
[40,1,(_1) => { __ = _1 }],
[40,0,() => {  __ = []  }],
[41,1,(_1) => {  __ = [_1]  }],
[41,3,(_1,_2,_3) => {  _1.push(_3); __ = _1  }],
[42,1,(_1) => { __ = _1 }],
[42,1,(_1) => { __ = _1 }],
[42,1,(_1) => { __ = _1 }],
[42,1,(_1) => { __ = _1 }],
[43,3,(_1,_2,_3) => { 
            __ = {
                type: 'NewExpression',
                callee: _2,
                arguments: _3
            }
         }],
[44,1,(_1) => { __ = _1 }],
[44,1,(_1) => { __ = _1 }],
[44,1,(_1) => { __ = _1 }],
[44,1,(_1) => { __ = _1 }],
[44,1,(_1) => { __ = _1 }],
[45,1,(_1) => {  __ = Literal('Numeric', Number(_1)) }],
[46,1,(_1) => {  __ = Literal('Boolean', true) }],
[47,1,(_1) => {  __ = Literal('Boolean', false) }],
[48,1,(_1) => {  __ = Literal('Null', null) }],
[49,1,(_1) => {  __ = Literal('String', _1.slice(1, -1)) }],
[50,3,(_1,_2,_3) => { 
            __ = _2
         }],
[51,1,(_1) => { __ = _1 }],
[52,1,(_1) => { __ = _1 }],
[52,3,(_1,_2,_3) => {  __ = MemberExpression(_1, _3)  }],
[52,4,(_1,_2,_3,_4) => {  __ = MemberExpression(_1, _3)  }]];

/**
 * Encoded tokens map.
 */
const tokens = {"CLASS":"53","EXTENDS":"54","WHILE":"55","FOR":"56","LET":"57","SIMPLE_ASSIGN":"58","IF":"59","ELSE":"60","DEF":"61","RETURN":"62","IDENTIFIER":"63","COMPLEX_ASSIGN":"64","LOGICAL_OR":"65","LOGICAL_AND":"66","EQUALITY_OPERATOR":"67","RELATIONAL_OPERATOR":"68","ADDITIVE_OPERATOR":"69","MULTIPLICATIVE_OPERATOR":"70","NEW":"71","NUMBER":"72","TRUE":"73","FALSE":"74","NULL":"75","STRING":"76","'('":"77","')'":"78","';'":"79","','":"80","'{'":"81","'}'":"82","'.'":"83","'['":"84","']'":"85","$":"86"};

/**
 * Parsing table (generated by Syntax tool).
 */
const table = [{"0":1,"1":2,"2":3,"3":12,"6":11,"7":52,"8":53,"10":10,"11":50,"16":9,"17":7,"20":8,"21":6,"23":4,"24":5,"25":41,"27":13,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"53":"s56","55":"s54","56":"s55","57":"s51","59":"s49","61":"s47","62":"s48","63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43","79":"s45","81":"s46"},{"86":"acc"},{"2":57,"3":12,"6":11,"7":52,"8":53,"10":10,"11":50,"16":9,"17":7,"20":8,"21":6,"23":4,"24":5,"25":41,"27":13,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"53":"s56","55":"s54","56":"s55","57":"s51","59":"s49","61":"s47","62":"s48","63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43","79":"s45","81":"s46","86":"r1"},{"53":"r2","55":"r2","56":"r2","57":"r2","59":"r2","61":"r2","62":"r2","63":"r2","69":"r2","71":"r2","72":"r2","73":"r2","74":"r2","75":"r2","76":"r2","77":"r2","79":"r2","81":"r2","82":"r2","86":"r2"},{"53":"r4","55":"r4","56":"r4","57":"r4","59":"r4","60":"r4","61":"r4","62":"r4","63":"r4","69":"r4","71":"r4","72":"r4","73":"r4","74":"r4","75":"r4","76":"r4","77":"r4","79":"r4","81":"r4","82":"r4","86":"r4"},{"53":"r5","55":"r5","56":"r5","57":"r5","59":"r5","60":"r5","61":"r5","62":"r5","63":"r5","69":"r5","71":"r5","72":"r5","73":"r5","74":"r5","75":"r5","76":"r5","77":"r5","79":"r5","81":"r5","82":"r5","86":"r5"},{"53":"r6","55":"r6","56":"r6","57":"r6","59":"r6","60":"r6","61":"r6","62":"r6","63":"r6","69":"r6","71":"r6","72":"r6","73":"r6","74":"r6","75":"r6","76":"r6","77":"r6","79":"r6","81":"r6","82":"r6","86":"r6"},{"53":"r7","55":"r7","56":"r7","57":"r7","59":"r7","60":"r7","61":"r7","62":"r7","63":"r7","69":"r7","71":"r7","72":"r7","73":"r7","74":"r7","75":"r7","76":"r7","77":"r7","79":"r7","81":"r7","82":"r7","86":"r7"},{"53":"r8","55":"r8","56":"r8","57":"r8","59":"r8","60":"r8","61":"r8","62":"r8","63":"r8","69":"r8","71":"r8","72":"r8","73":"r8","74":"r8","75":"r8","76":"r8","77":"r8","79":"r8","81":"r8","82":"r8","86":"r8"},{"53":"r9","55":"r9","56":"r9","57":"r9","59":"r9","60":"r9","61":"r9","62":"r9","63":"r9","69":"r9","71":"r9","72":"r9","73":"r9","74":"r9","75":"r9","76":"r9","77":"r9","79":"r9","81":"r9","82":"r9","86":"r9"},{"53":"r10","55":"r10","56":"r10","57":"r10","59":"r10","60":"r10","61":"r10","62":"r10","63":"r10","69":"r10","71":"r10","72":"r10","73":"r10","74":"r10","75":"r10","76":"r10","77":"r10","79":"r10","81":"r10","82":"r10","86":"r10"},{"53":"r11","55":"r11","56":"r11","57":"r11","59":"r11","60":"r11","61":"r11","62":"r11","63":"r11","69":"r11","71":"r11","72":"r11","73":"r11","74":"r11","75":"r11","76":"r11","77":"r11","79":"r11","81":"r11","82":"r11","86":"r11"},{"53":"r12","55":"r12","56":"r12","57":"r12","59":"r12","60":"r12","61":"r12","62":"r12","63":"r12","69":"r12","71":"r12","72":"r12","73":"r12","74":"r12","75":"r12","76":"r12","77":"r12","79":"r12","81":"r12","82":"r12","86":"r12"},{"79":"s58"},{"78":"r48","79":"r48","85":"r48"},{"65":"s59","78":"r49","79":"r49","80":"r49","85":"r49"},{"29":81,"58":"s82","64":"s83","65":"r78","66":"r78","67":"r78","68":"r78","69":"r78","70":"r78","77":"r69","78":"r78","79":"r78","80":"r78","85":"r78"},{"65":"r53","66":"s62","78":"r53","79":"r53","80":"r53","85":"r53"},{"65":"r55","66":"r55","67":"s64","78":"r55","79":"r55","80":"r55","85":"r55"},{"65":"r57","66":"r57","67":"r57","68":"s66","78":"r57","79":"r57","80":"r57","85":"r57"},{"65":"r59","66":"r59","67":"r59","68":"r59","69":"s68","78":"r59","79":"r59","80":"r59","85":"r59"},{"65":"r62","66":"r62","67":"r62","68":"r62","69":"r62","70":"s70","78":"r62","79":"r62","80":"r62","85":"r62"},{"65":"r64","66":"r64","67":"r64","68":"r64","69":"r64","70":"r64","78":"r64","79":"r64","80":"r64","85":"r64"},{"65":"r65","66":"r65","67":"r65","68":"r65","69":"r65","70":"r65","78":"r65","79":"r65","80":"r65","85":"r65"},{"65":"r66","66":"r66","67":"r66","68":"r66","69":"r66","70":"r66","77":"r70","78":"r66","79":"r66","80":"r66","85":"r66"},{"25":41,"36":72,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":61,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43"},{"65":"r76","66":"r76","67":"r76","68":"r76","69":"r76","70":"r76","78":"r76","79":"r76","80":"r76","85":"r76"},{"65":"r77","66":"r77","67":"r77","68":"r77","69":"r77","70":"r77","78":"r77","79":"r77","80":"r77","85":"r77"},{"65":"r79","66":"r79","67":"r79","68":"r79","69":"r79","70":"r79","78":"r79","79":"r79","80":"r79","85":"r79"},{"65":"r81","66":"r81","67":"r81","68":"r81","69":"r81","70":"r81","78":"r81","79":"r81","80":"r81","85":"r81"},{"65":"r82","66":"r82","67":"r82","68":"r82","69":"r82","70":"r82","78":"r82","79":"r82","80":"r82","85":"r82"},{"65":"r83","66":"r83","67":"r83","68":"r83","69":"r83","70":"r83","78":"r83","79":"r83","80":"r83","85":"r83"},{"65":"r84","66":"r84","67":"r84","68":"r84","69":"r84","70":"r84","78":"r84","79":"r84","80":"r84","85":"r84"},{"65":"r85","66":"r85","67":"r85","68":"r85","69":"r85","70":"r85","78":"r85","79":"r85","80":"r85","85":"r85"},{"65":"r86","66":"r86","67":"r86","68":"r86","69":"r86","70":"r86","78":"r86","79":"r86","80":"r86","85":"r86"},{"65":"r90","66":"r90","67":"r90","68":"r90","69":"r90","70":"r90","78":"r90","79":"r90","80":"r90","85":"r90"},{"65":"r87","66":"r87","67":"r87","68":"r87","69":"r87","70":"r87","78":"r87","79":"r87","80":"r87","85":"r87"},{"65":"r88","66":"r88","67":"r88","68":"r88","69":"r88","70":"r88","78":"r88","79":"r88","80":"r88","85":"r88"},{"65":"r89","66":"r89","67":"r89","68":"r89","69":"r89","70":"r89","78":"r89","79":"r89","80":"r89","85":"r89"},{"25":41,"52":73,"63":"s42"},{"58":"r92","64":"r92","65":"r92","66":"r92","67":"r92","68":"r92","69":"r92","70":"r92","77":"r92","78":"r92","79":"r92","80":"r92","83":"s75","84":"s76","85":"r92"},{"58":"r93","64":"r93","65":"r93","66":"r93","67":"r93","68":"r93","69":"r93","70":"r93","77":"r93","78":"r93","79":"r93","80":"r93","83":"r93","84":"r93","85":"r93"},{"54":"r45","58":"r45","64":"r45","65":"r45","66":"r45","67":"r45","68":"r45","69":"r45","70":"r45","77":"r45","78":"r45","79":"r45","80":"r45","81":"r45","83":"r45","84":"r45","85":"r45"},{"25":41,"27":85,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43"},{"39":87,"77":"s77"},{"53":"r44","55":"r44","56":"r44","57":"r44","59":"r44","60":"r44","61":"r44","62":"r44","63":"r44","69":"r44","71":"r44","72":"r44","73":"r44","74":"r44","75":"r44","76":"r44","77":"r44","79":"r44","81":"r44","82":"r44","86":"r44"},{"1":95,"2":3,"3":12,"6":11,"7":52,"8":53,"10":10,"11":50,"16":9,"17":7,"20":8,"21":6,"22":94,"23":4,"24":5,"25":41,"27":13,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"53":"s56","55":"s54","56":"s55","57":"s51","59":"s49","61":"s47","62":"s48","63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43","79":"s45","81":"s46","82":"r42"},{"25":97,"63":"s42"},{"25":41,"26":106,"27":107,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43","79":"r47"},{"77":"s109"},{"79":"s115"},{"12":116,"13":117,"25":118,"63":"s42"},{"53":"r17","55":"r17","56":"r17","57":"r17","59":"r17","60":"r17","61":"r17","62":"r17","63":"r17","69":"r17","71":"r17","72":"r17","73":"r17","74":"r17","75":"r17","76":"r17","77":"r17","79":"r17","81":"r17","82":"r17","86":"r17"},{"53":"r18","55":"r18","56":"r18","57":"r18","59":"r18","60":"r18","61":"r18","62":"r18","63":"r18","69":"r18","71":"r18","72":"r18","73":"r18","74":"r18","75":"r18","76":"r18","77":"r18","79":"r18","81":"r18","82":"r18","86":"r18"},{"77":"s125"},{"77":"s129"},{"25":139,"63":"s42"},{"53":"r3","55":"r3","56":"r3","57":"r3","59":"r3","61":"r3","62":"r3","63":"r3","69":"r3","71":"r3","72":"r3","73":"r3","74":"r3","75":"r3","76":"r3","77":"r3","79":"r3","81":"r3","82":"r3","86":"r3"},{"53":"r43","55":"r43","56":"r43","57":"r43","59":"r43","60":"r43","61":"r43","62":"r43","63":"r43","69":"r43","71":"r43","72":"r43","73":"r43","74":"r43","75":"r43","76":"r43","77":"r43","79":"r43","81":"r43","82":"r43","86":"r43"},{"25":41,"31":60,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":61,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43"},{"65":"r54","66":"s62","78":"r54","79":"r54","80":"r54","85":"r54"},{"65":"r78","66":"r78","67":"r78","68":"r78","69":"r78","70":"r78","77":"r69","78":"r78","79":"r78","80":"r78","85":"r78"},{"25":41,"32":63,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":61,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43"},{"65":"r56","66":"r56","67":"s64","78":"r56","79":"r56","80":"r56","85":"r56"},{"25":41,"33":65,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":61,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43"},{"65":"r58","66":"r58","67":"r58","68":"s66","78":"r58","79":"r58","80":"r58","85":"r58"},{"25":41,"34":67,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":61,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43"},{"65":"r60","66":"r60","67":"r60","68":"r60","69":"s68","78":"r60","79":"r60","80":"r60","85":"r60"},{"25":41,"35":69,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":61,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43"},{"65":"r61","66":"r61","67":"r61","68":"r61","69":"r61","70":"s70","78":"r61","79":"r61","80":"r61","85":"r61"},{"25":41,"36":71,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":61,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43"},{"65":"r63","66":"r63","67":"r63","68":"r63","69":"r63","70":"r63","78":"r63","79":"r63","80":"r63","85":"r63"},{"65":"r67","66":"r67","67":"r67","68":"r67","69":"r67","70":"r67","78":"r67","79":"r67","80":"r67","85":"r67"},{"39":74,"77":"s77","83":"s75","84":"s76"},{"65":"r80","66":"r80","67":"r80","68":"r80","69":"r80","70":"r80","78":"r80","79":"r80","80":"r80","85":"r80"},{"25":78,"63":"s42"},{"25":41,"27":79,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43"},{"25":41,"28":90,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"40":88,"41":89,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43","78":"r73"},{"58":"r94","64":"r94","65":"r94","66":"r94","67":"r94","68":"r94","69":"r94","70":"r94","77":"r94","78":"r94","79":"r94","80":"r94","83":"r94","84":"r94","85":"r94"},{"85":"s80"},{"58":"r95","64":"r95","65":"r95","66":"r95","67":"r95","68":"r95","69":"r95","70":"r95","77":"r95","78":"r95","79":"r95","80":"r95","83":"r95","84":"r95","85":"r95"},{"25":41,"28":84,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43"},{"63":"r51","69":"r51","71":"r51","72":"r51","73":"r51","74":"r51","75":"r51","76":"r51","77":"r51"},{"63":"r52","69":"r52","71":"r52","72":"r52","73":"r52","74":"r52","75":"r52","76":"r52","77":"r52"},{"78":"r50","79":"r50","80":"r50","85":"r50"},{"78":"s86"},{"65":"r91","66":"r91","67":"r91","68":"r91","69":"r91","70":"r91","78":"r91","79":"r91","80":"r91","85":"r91"},{"65":"r68","66":"r68","67":"r68","68":"r68","69":"r68","70":"r68","77":"r68","78":"r68","79":"r68","80":"r68","85":"r68"},{"78":"s91"},{"78":"r72","80":"s92"},{"78":"r74","80":"r74"},{"65":"r71","66":"r71","67":"r71","68":"r71","69":"r71","70":"r71","77":"r71","78":"r71","79":"r71","80":"r71","85":"r71"},{"25":41,"28":93,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43"},{"78":"r75","80":"r75"},{"82":"s96"},{"2":57,"3":12,"6":11,"7":52,"8":53,"10":10,"11":50,"16":9,"17":7,"20":8,"21":6,"23":4,"24":5,"25":41,"27":13,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"53":"s56","55":"s54","56":"s55","57":"s51","59":"s49","61":"s47","62":"s48","63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43","79":"s45","81":"s46","82":"r41"},{"53":"r40","55":"r40","56":"r40","57":"r40","59":"r40","60":"r40","61":"r40","62":"r40","63":"r40","69":"r40","71":"r40","72":"r40","73":"r40","74":"r40","75":"r40","76":"r40","77":"r40","79":"r40","81":"r40","82":"r40","86":"r40"},{"77":"s98"},{"18":99,"19":100,"25":101,"63":"s42","78":"r36"},{"78":"s102"},{"78":"r35","80":"s104"},{"78":"r37","80":"r37"},{"21":103,"81":"s46"},{"53":"r34","55":"r34","56":"r34","57":"r34","59":"r34","60":"r34","61":"r34","62":"r34","63":"r34","69":"r34","71":"r34","72":"r34","73":"r34","74":"r34","75":"r34","76":"r34","77":"r34","79":"r34","81":"r34","82":"r34","86":"r34"},{"25":105,"63":"s42"},{"78":"r38","80":"r38"},{"79":"s108"},{"78":"r46","79":"r46"},{"53":"r39","55":"r39","56":"r39","57":"r39","59":"r39","60":"r39","61":"r39","62":"r39","63":"r39","69":"r39","71":"r39","72":"r39","73":"r39","74":"r39","75":"r39","76":"r39","77":"r39","79":"r39","81":"r39","82":"r39","86":"r39"},{"25":41,"27":110,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43"},{"78":"s111"},{"2":112,"3":12,"6":11,"7":52,"8":53,"10":10,"11":50,"16":9,"17":7,"20":8,"21":6,"23":4,"24":5,"25":41,"27":13,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"53":"s56","55":"s54","56":"s55","57":"s51","59":"s49","61":"s47","62":"s48","63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43","79":"s45","81":"s46"},{"53":"r32","55":"r32","56":"r32","57":"r32","59":"r32","60":"s113","61":"r32","62":"r32","63":"r32","69":"r32","71":"r32","72":"r32","73":"r32","74":"r32","75":"r32","76":"r32","77":"r32","79":"r32","81":"r32","82":"r32","86":"r32"},{"2":114,"3":12,"6":11,"7":52,"8":53,"10":10,"11":50,"16":9,"17":7,"20":8,"21":6,"23":4,"24":5,"25":41,"27":13,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"53":"s56","55":"s54","56":"s55","57":"s51","59":"s49","61":"s47","62":"s48","63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43","79":"s45","81":"s46"},{"53":"r33","55":"r33","56":"r33","57":"r33","59":"r33","60":"r33","61":"r33","62":"r33","63":"r33","69":"r33","71":"r33","72":"r33","73":"r33","74":"r33","75":"r33","76":"r33","77":"r33","79":"r33","81":"r33","82":"r33","86":"r33"},{"53":"r24","55":"r24","56":"r24","57":"r24","59":"r24","60":"r24","61":"r24","62":"r24","63":"r24","69":"r24","71":"r24","72":"r24","73":"r24","74":"r24","75":"r24","76":"r24","77":"r24","79":"r24","81":"r24","82":"r24","86":"r24"},{"79":"r25","80":"s119"},{"79":"r26","80":"r26"},{"14":121,"15":122,"58":"s123","79":"r30","80":"r30"},{"13":120,"25":118,"63":"s42"},{"79":"r27","80":"r27"},{"79":"r28","80":"r28"},{"79":"r29","80":"r29"},{"25":41,"28":124,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43"},{"79":"r31","80":"r31"},{"25":41,"27":126,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43"},{"78":"s127"},{"2":128,"3":12,"6":11,"7":52,"8":53,"10":10,"11":50,"16":9,"17":7,"20":8,"21":6,"23":4,"24":5,"25":41,"27":13,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"53":"s56","55":"s54","56":"s55","57":"s51","59":"s49","61":"s47","62":"s48","63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43","79":"s45","81":"s46"},{"53":"r19","55":"r19","56":"r19","57":"r19","59":"r19","60":"r19","61":"r19","62":"r19","63":"r19","69":"r19","71":"r19","72":"r19","73":"r19","74":"r19","75":"r19","76":"r19","77":"r19","79":"r19","81":"r19","82":"r19","86":"r19"},{"9":130,"11":131,"25":41,"27":132,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"57":"s51","63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43","79":"r23"},{"79":"s133"},{"79":"r21"},{"79":"r22"},{"25":41,"26":134,"27":107,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43","79":"r47"},{"79":"s135"},{"25":41,"26":136,"27":107,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43","78":"r47"},{"78":"s137"},{"2":138,"3":12,"6":11,"7":52,"8":53,"10":10,"11":50,"16":9,"17":7,"20":8,"21":6,"23":4,"24":5,"25":41,"27":13,"28":14,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":44,"42":23,"43":27,"44":26,"45":29,"46":31,"47":32,"48":33,"49":30,"50":28,"51":16,"52":40,"53":"s56","55":"s54","56":"s55","57":"s51","59":"s49","61":"s47","62":"s48","63":"s42","69":"s25","71":"s39","72":"s34","73":"s36","74":"s37","75":"s38","76":"s35","77":"s43","79":"s45","81":"s46"},{"53":"r20","55":"r20","56":"r20","57":"r20","59":"r20","60":"r20","61":"r20","62":"r20","63":"r20","69":"r20","71":"r20","72":"r20","73":"r20","74":"r20","75":"r20","76":"r20","77":"r20","79":"r20","81":"r20","82":"r20","86":"r20"},{"4":140,"5":141,"54":"s142","81":"r15"},{"21":143,"81":"s46"},{"81":"r14"},{"25":144,"63":"s42"},{"53":"r13","55":"r13","56":"r13","57":"r13","59":"r13","60":"r13","61":"r13","62":"r13","63":"r13","69":"r13","71":"r13","72":"r13","73":"r13","74":"r13","75":"r13","76":"r13","77":"r13","79":"r13","81":"r13","82":"r13","86":"r13"},{"81":"r16"}];

/**
 * Parsing stack.
 */
const stack = [];

/**
 * Tokenizer instance.
 */
let tokenizer;
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 * See `--custom-tokinzer` to skip this generation, and use a custom one.
 */

const lexRules = [[/^\(/, function() { return "'('"; }],
[/^\)/, function() { return "')'"; }],
[/^;/, function() { return "';'"; }],
[/^,/, function() { return "','"; }],
[/^\{/, function() { return "'{'"; }],
[/^\}/, function() { return "'}'"; }],
[/^\./, function() { return "'.'"; }],
[/^\[/, function() { return "'['"; }],
[/^\]/, function() { return "']'"; }],
[/^\/\/.*/, function() { /* skip comments */ }],
[/^\/\*(.|\s)*\*\//, function() { /* skip comments */ }],
[/^\s+/, function() { /* skip whitespace */ }],
[/^\bdef\b/, function() { return 'DEF' }],
[/^\breturn\b/, function() { return 'RETURN' }],
[/^\bif\b/, function() { return 'IF' }],
[/^\belse\b/, function() { return 'ELSE' }],
[/^\blet\b/, function() { return 'LET' }],
[/^\bwhile\b/, function() { return 'WHILE' }],
[/^\bfor\b/, function() { return 'FOR' }],
[/^\bclass\b/, function() { return 'CLASS' }],
[/^\bextends\b/, function() { return 'EXTENDS' }],
[/^\bnew\b/, function() { return 'NEW' }],
[/^\btrue\b/, function() { return 'TRUE' }],
[/^\bfalse\b/, function() { return 'FALSE' }],
[/^\bnull\b/, function() { return 'NULL' }],
[/^\d+/, function() { return 'NUMBER' }],
[/^\w+/, function() { return 'IDENTIFIER' }],
[/^".*"/, function() { return 'STRING' }],
[/^"/, function() { /* fix the vscode bnf plugin highlight bug */ }],
[/^\|\|/, function() { return 'LOGICAL_OR'             /* 优先级比 && 低 */ }],
[/^&&/, function() { return 'LOGICAL_AND'            /* 优先级比 == 低 */ }],
[/^[\=!]=/, function() { return 'EQUALITY_OPERATOR'      /* 优先级比 >,>=,<,<= 低 */ }],
[/^[><]=?/, function() { return 'RELATIONAL_OPERATOR'    /* 优先级比 +,- 低 */ }],
[/^=/, function() { return 'SIMPLE_ASSIGN'          /* 优先级比 || 低，注意正则匹配必须在 == 之后 */ }],
[/^[*/+\-]=/, function() { return 'COMPLEX_ASSIGN'         /* 优先级比 || 低 */ }],
[/^[+\-]/, function() { return 'ADDITIVE_OPERATOR'      /* 优先级比 *,/ 低 */ }],
[/^[*/]/, function() { return 'MULTIPLICATIVE_OPERATOR' }]];
const lexRulesByConditions = {"INITIAL":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]};

const EOF_TOKEN = {
  type: EOF,
  value: '',
};

tokenizer = {
  initString(string) {
    this._string = string;
    this._cursor = 0;

    this._states = ['INITIAL'];
    this._tokensQueue = [];

    this._currentLine = 1;
    this._currentColumn = 0;
    this._currentLineBeginOffset = 0;

    /**
     * Matched token location data.
     */
    this._tokenStartOffset = 0;
    this._tokenEndOffset = 0;
    this._tokenStartLine = 1;
    this._tokenEndLine = 1;
    this._tokenStartColumn = 0;
    this._tokenEndColumn = 0;

    return this;
  },

  /**
   * Returns tokenizer states.
   */
  getStates() {
    return this._states;
  },

  getCurrentState() {
    return this._states[this._states.length - 1];
  },

  pushState(state) {
    this._states.push(state);
  },

  begin(state) {
    this.pushState(state);
  },

  popState() {
    if (this._states.length > 1) {
      return this._states.pop();
    }
    return this._states[0];
  },

  getNextToken() {
    // Something was queued, return it.
    if (this._tokensQueue.length > 0) {
      return this.onToken(this._toToken(this._tokensQueue.shift()));
    }

    if (!this.hasMoreTokens()) {
      return this.onToken(EOF_TOKEN);
    }

    let string = this._string.slice(this._cursor);
    let lexRulesForState = lexRulesByConditions[this.getCurrentState()];

    for (let i = 0; i < lexRulesForState.length; i++) {
      let lexRuleIndex = lexRulesForState[i];
      let lexRule = lexRules[lexRuleIndex];

      let matched = this._match(string, lexRule[0]);

      // Manual handling of EOF token (the end of string). Return it
      // as `EOF` symbol.
      if (string === '' && matched === '') {
        this._cursor++;
      }

      if (matched !== null) {
        yytext = matched;
        yyleng = yytext.length;
        let token = lexRule[1].call(this);

        if (!token) {
          return this.getNextToken();
        }

        // If multiple tokens are returned, save them to return
        // on next `getNextToken` call.

        if (Array.isArray(token)) {
          const tokensToQueue = token.slice(1);
          token = token[0];
          if (tokensToQueue.length > 0) {
            this._tokensQueue.unshift(...tokensToQueue);
          }
        }

        return this.onToken(this._toToken(token, yytext));
      }
    }

    if (this.isEOF()) {
      this._cursor++;
      return EOF_TOKEN;
    }

    this.throwUnexpectedToken(
      string[0],
      this._currentLine,
      this._currentColumn
    );
  },

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  throwUnexpectedToken(symbol, line, column) {
    const lineSource = this._string.split('\n')[line - 1];
    let lineData = '';

    if (lineSource) {
      const pad = ' '.repeat(column);
      lineData = '\n\n' + lineSource + '\n' + pad + '^\n';
    }

    throw new SyntaxError(
      `${lineData}Unexpected token: "${symbol}" ` +
      `at ${line}:${column}.`
    );
  },

  getCursor() {
    return this._cursor;
  },

  getCurrentLine() {
    return this._currentLine;
  },

  getCurrentColumn() {
    return this._currentColumn;
  },

  _captureLocation(matched) {
    const nlRe = /\n/g;

    // Absolute offsets.
    this._tokenStartOffset = this._cursor;

    // Line-based locations, start.
    this._tokenStartLine = this._currentLine;
    this._tokenStartColumn =
      this._tokenStartOffset - this._currentLineBeginOffset;

    // Extract `\n` in the matched token.
    let nlMatch;
    while ((nlMatch = nlRe.exec(matched)) !== null) {
      this._currentLine++;
      this._currentLineBeginOffset = this._tokenStartOffset + nlMatch.index + 1;
    }

    this._tokenEndOffset = this._cursor + matched.length;

    // Line-based locations, end.
    this._tokenEndLine = this._currentLine;
    this._tokenEndColumn = this._currentColumn =
      (this._tokenEndOffset - this._currentLineBeginOffset);
  },

  _toToken(tokenType, yytext = '') {
    return {
      // Basic data.
      type: tokenType,
      value: yytext,

      // Location data.
      startOffset: this._tokenStartOffset,
      endOffset: this._tokenEndOffset,
      startLine: this._tokenStartLine,
      endLine: this._tokenEndLine,
      startColumn: this._tokenStartColumn,
      endColumn: this._tokenEndColumn,
    };
  },

  isEOF() {
    return this._cursor === this._string.length;
  },

  hasMoreTokens() {
    return this._cursor <= this._string.length;
  },

  _match(string, regexp) {
    let matched = string.match(regexp);
    if (matched) {
      // Handle `\n` in the matched token to track line numbers.
      this._captureLocation(matched[0]);
      this._cursor += matched[0].length;
      return matched[0];
    }
    return null;
  },

  /**
   * Allows analyzing, and transforming token. Default implementation
   * just passes the token through.
   */
  onToken(token) {
    return token;
  },
};

/**
 * Expose tokenizer so it can be accessed in semantic actions.
 */
yy.lexer = tokenizer;
yy.tokenizer = tokenizer;

/**
 * Global parsing options. Some options can be shadowed per
 * each `parse` call, if the optations are passed.
 *
 * Initalized to the `captureLocations` which is passed
 * from the generator. Other options can be added at runtime.
 */
yy.options = {
  captureLocations: false,
};

/**
 * Parsing module.
 */
const yyparse = {
  /**
   * Sets global parsing options.
   */
  setOptions(options) {
    yy.options = options;
    return this;
  },

  /**
   * Returns parsing options.
   */
  getOptions() {
    return yy.options;
  },

  /**
   * Parses a string.
   */
  parse(string, parseOptions) {
    if (!tokenizer) {
      throw new Error(`Tokenizer instance wasn't specified.`);
    }

    tokenizer.initString(string);

    /**
     * If parse options are passed, override global parse options for
     * this call, and later restore global options.
     */
    let globalOptions = yy.options;
    if (parseOptions) {
      yy.options = Object.assign({}, yy.options, parseOptions);
    }

    /**
     * Allow callers to do setup work based on the
     * parsing string, and passed options.
     */
    yyparse.onParseBegin(string, tokenizer, yy.options);

    stack.length = 0;
    stack.push(0);

    let token = tokenizer.getNextToken();
    let shiftedToken = null;

    do {
      if (!token) {
        // Restore options.
        yy.options = globalOptions;
        unexpectedEndOfInput();
      }

      let state = stack[stack.length - 1];
      let column = tokens[token.type];

      if (!table[state].hasOwnProperty(column)) {
        yy.options = globalOptions;
        unexpectedToken(token);
      }

      let entry = table[state][column];

      // Shift action.
      if (entry[0] === 's') {
        let loc = null;

        if (yy.options.captureLocations) {
          loc = {
            startOffset: token.startOffset,
            endOffset: token.endOffset,
            startLine: token.startLine,
            endLine: token.endLine,
            startColumn: token.startColumn,
            endColumn: token.endColumn,
          };
        }

        shiftedToken = this.onShift(token);

        stack.push(
          {symbol: tokens[shiftedToken.type], semanticValue: shiftedToken.value, loc},
          Number(entry.slice(1))
        );

        token = tokenizer.getNextToken();
      }

      // Reduce action.
      else if (entry[0] === 'r') {
        let productionNumber = entry.slice(1);
        let production = productions[productionNumber];
        let hasSemanticAction = typeof production[2] === 'function';
        let semanticValueArgs = hasSemanticAction ? [] : null;

        const locationArgs = (
          hasSemanticAction && yy.options.captureLocations
            ? []
            : null
        );

        if (production[1] !== 0) {
          let rhsLength = production[1];
          while (rhsLength-- > 0) {
            stack.pop();
            let stackEntry = stack.pop();

            if (hasSemanticAction) {
              semanticValueArgs.unshift(stackEntry.semanticValue);

              if (locationArgs) {
                locationArgs.unshift(stackEntry.loc);
              }
            }
          }
        }

        const reduceStackEntry = {symbol: production[0]};

        if (hasSemanticAction) {
          yytext = shiftedToken ? shiftedToken.value : null;
          yyleng = shiftedToken ? shiftedToken.value.length : null;

          const semanticActionArgs = (
            locationArgs !== null
              ? semanticValueArgs.concat(locationArgs)
              : semanticValueArgs
          );

          production[2](...semanticActionArgs);

          reduceStackEntry.semanticValue = __;

          if (locationArgs) {
            reduceStackEntry.loc = __loc;
          }
        }

        const nextState = stack[stack.length - 1];
        const symbolToReduceWith = production[0];

        stack.push(
          reduceStackEntry,
          table[nextState][symbolToReduceWith]
        );
      }

      // Accept.
      else if (entry === 'acc') {
        stack.pop();
        let parsed = stack.pop();

        if (stack.length !== 1 ||
            stack[0] !== 0 ||
            tokenizer.hasMoreTokens()) {
          // Restore options.
          yy.options = globalOptions;
          unexpectedToken(token);
        }

        if (parsed.hasOwnProperty('semanticValue')) {
          yy.options = globalOptions;
          yyparse.onParseEnd(parsed.semanticValue);
          return parsed.semanticValue;
        }

        yyparse.onParseEnd();

        // Restore options.
        yy.options = globalOptions;
        return true;
      }

    } while (tokenizer.hasMoreTokens() || stack.length > 1);
  },

  setTokenizer(customTokenizer) {
    tokenizer = customTokenizer;
    return yyparse;
  },

  getTokenizer() {
    return tokenizer;
  },

  onParseBegin(string, tokenizer, options) {},
  onParseEnd(parsed) {},

  /**
   * Allows analyzing, and transforming shifted token. Default implementation
   * just passes the token through.
   */
  onShift(token) {
    return token;
  },
};

function IfStatement(test, consequent, alternate) {
    return {
        type: 'IfStatement',
        test, consequent, alternate
    };
}

function LogicalExpression(left, operator, right) {
    return {
        type:'LogicalExpression',
        operator,
        left,
        right
    };
}

function BinaryExpression(left, operator, right) {
    return {
        type:'BinaryExpression',
        operator,
        left,
        right
    };
}

function UnaryExpression(operator, argument) {
    return {
        type: 'UnaryExpression',
        operator,
        argument
    };
}

function MemberExpression(object, property) {
    return {
        type: 'MemberExpression',
        object,
        property
    };
}

function Literal(namePrefix, value) {
    return {
        type: `${namePrefix}Literal`,
        value: value
    };
}

function unexpectedToken(token) {
  if (token.type === EOF) {
    unexpectedEndOfInput();
  }

  tokenizer.throwUnexpectedToken(
    token.value,
    token.startLine,
    token.startColumn
  );
}

function unexpectedEndOfInput() {
  parseError(`Unexpected end of input.`);
}

function parseError(message) {
  throw new SyntaxError(message);
}

module.exports = yyparse;
